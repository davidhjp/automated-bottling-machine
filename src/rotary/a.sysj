reaction turnRotary(double WAIT :input signal bottleAtPos5, input signal tableAlignedWithSensor, output signal rotaryTableTrigger) {
	present(bottleAtPos5) {
		waitl(1s);
		await(!bottleAtPos5);
	}
	trap(T){{waitl(100ms); exit(T);} || { sustain rotaryTableTrigger;}}
	pause;
	waitl(WAIT s);
	await(tableAlignedWithSensor);
}
rotary(
		input signal tableAlignedWithSensor, bottleAtPos5, capOnBottleAtPos1,GUITrigger,capped;
		output signal rotaryTableTrigger;
		input boolean channel fillerReady, capperReady, convReady;
		input boolean channel filler_detect, capper_detect, conv_detect;
		input boolean channel requestCap;
		output boolean channel trig_filler, trig_capper, trig_conveyor;
		)
->
{
	signal placeCapOK, placeCap;
	boolean signal needToTurn;
	{
		System.out.println("starting");
		loop{
			abort(GUITrigger){
				{
					if(#filler_detect){
						send trig_filler(true);
						pause;
						receive fillerReady;
					}
				}
				||
				{
					if (#capper_detect){
						send trig_capper(true);
						pause;
						receive capperReady;
					}
				}
				||
				{
					if (#conv_detect){
						send trig_conveyor(true);
						pause;
						receive convReady;
					}
				}
				||
				{
					present(placeCap) {
						await(capped);
						emit needToTurn(true);
						emit placeCapOK;
						pause;
					}
				}

				if(#filler_detect || #capper_detect || #conv_detect || #needToTurn) {
					emit needToTurn(false);
					pause;
					turnRotary(1.5 : bottleAtPos5, tableAlignedWithSensor, rotaryTableTrigger);
				}
				pause;
			} do {
					turnRotary(1.5 : bottleAtPos5, tableAlignedWithSensor, rotaryTableTrigger);
			}
		}
	}
	||
	{
		{loop {receive filler_detect; pause;}} || {loop {receive capper_detect; pause;}} || {loop {receive conv_detect; pause;}}
	}
	||
	{
		loop{
			receive requestCap;
			System.out.println("requestCap");
			abort(immediate placeCapOK){sustain placeCap;}
			System.out.println("placeCapOK");
			pause;
		}
	}
	
}
